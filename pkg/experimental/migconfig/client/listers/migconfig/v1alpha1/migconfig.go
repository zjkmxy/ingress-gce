/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/ingress-gce/pkg/apis/migconfig/v1alpha1"
)

// MigConfigLister helps list MigConfigs.
type MigConfigLister interface {
	// List lists all MigConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MigConfig, err error)
	// MigConfigs returns an object that can list and get MigConfigs.
	MigConfigs(namespace string) MigConfigNamespaceLister
	MigConfigListerExpansion
}

// migConfigLister implements the MigConfigLister interface.
type migConfigLister struct {
	indexer cache.Indexer
}

// NewMigConfigLister returns a new MigConfigLister.
func NewMigConfigLister(indexer cache.Indexer) MigConfigLister {
	return &migConfigLister{indexer: indexer}
}

// List lists all MigConfigs in the indexer.
func (s *migConfigLister) List(selector labels.Selector) (ret []*v1alpha1.MigConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MigConfig))
	})
	return ret, err
}

// MigConfigs returns an object that can list and get MigConfigs.
func (s *migConfigLister) MigConfigs(namespace string) MigConfigNamespaceLister {
	return migConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MigConfigNamespaceLister helps list and get MigConfigs.
type MigConfigNamespaceLister interface {
	// List lists all MigConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MigConfig, err error)
	// Get retrieves the MigConfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MigConfig, error)
	MigConfigNamespaceListerExpansion
}

// migConfigNamespaceLister implements the MigConfigNamespaceLister
// interface.
type migConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MigConfigs in the indexer for a given namespace.
func (s migConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MigConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MigConfig))
	})
	return ret, err
}

// Get retrieves the MigConfig from the indexer for a given namespace and name.
func (s migConfigNamespaceLister) Get(name string) (*v1alpha1.MigConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("migconfig"), name)
	}
	return obj.(*v1alpha1.MigConfig), nil
}
